<?php

declare(strict_types=1);

namespace Mammatus\Cron\Generated;

use Mammatus\Cron\Worker\Work;
use React\EventLoop\LoopInterface;
use React\Promise\PromiseInterface;
use ReactParallel\Pool\Worker\Worker as WorkerPool;
use WyriHaximus\React\Cron\Action;
use WyriHaximus\React\Cron;
use WyriHaximus\React\Mutex\Contracts\MutexInterface;

abstract class AbstractManager
{
    private ?Cron $cron = null;

    protected function cron(LoopInterface $loop, MutexInterface $mutex, WorkerPool $workerPool): Cron
    {
        if ($this->cron instanceof Cron) {
            return $this->cron;
        }

        $this->cron = Cron::createWithMutex(
            $loop,
            $mutex,
            {% for action in actions %}
            new Action(
                'cron_{{ action.cron.name() }}_{{ action.class|replace({'\\': '_'}) }}',
                {{ action.cron.ttl() }},
                '{{ action.cron.schedule() }}',
                static fn (): PromiseInterface => $workerPool->perform(new Work(\{{ action.class }}::class))
            ),
        {% endfor %}
        );

        return $this->cron;
    }
}
